name: Publish to NuGet

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          9.0.x
          8.0.x
        
    - name: Extract version from tag
      id: version
      run: |
        # Remove 'v' prefix from tag
        VERSION=${GITHUB_REF_NAME#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
        # Validate version format (semantic versioning)
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
          echo "Error: Invalid version format. Expected semantic versioning (e.g., 1.2.3, 1.2.3-beta.1)"
          exit 1
        fi

    - name: Update project version
      run: |
        # Update version in csproj file
        PROJECT_FILE="src/AcmeshWrapper/AcmeshWrapper.csproj"
        
        # Check if project file exists
        if [ ! -f "$PROJECT_FILE" ]; then
          echo "Error: Project file not found at $PROJECT_FILE"
          exit 1
        fi
        
        # Update version using sed (cross-platform compatible)
        sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.version.outputs.VERSION }}<\/Version>/" "$PROJECT_FILE"
        
        # Verify the update
        echo "Updated version in $PROJECT_FILE:"
        grep "<Version>" "$PROJECT_FILE"

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger:"console;verbosity=detailed"

    - name: Create NuGet package
      run: |
        dotnet pack src/AcmeshWrapper/AcmeshWrapper.csproj \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          -p:PackageVersion=${{ steps.version.outputs.VERSION }}

    - name: Validate NuGet package
      run: |
        # Install NuGet Package Explorer CLI tool
        dotnet tool install --global dotnet-validate --version 0.0.1-preview.304
        
        # Find the package file
        PACKAGE_FILE=$(find ./artifacts -name "*.nupkg" | head -n 1)
        
        if [ -z "$PACKAGE_FILE" ]; then
          echo "Error: No NuGet package found in artifacts directory"
          exit 1
        fi
        
        echo "Found package: $PACKAGE_FILE"
        
        # Basic validation - check file exists and has size
        if [ ! -s "$PACKAGE_FILE" ]; then
          echo "Error: Package file is empty"
          exit 1
        fi
        
        # List package contents
        echo "Package contents:"
        unzip -l "$PACKAGE_FILE"

    - name: Push to NuGet.org
      if: success()
      run: |
        dotnet nuget push ./artifacts/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Changes in ${{ steps.version.outputs.VERSION }}
          
          ### NuGet Package
          - Package Version: ${{ steps.version.outputs.VERSION }}
          - [View on NuGet.org](https://www.nuget.org/packages/AcmeshWrapper/${{ steps.version.outputs.VERSION }})
          
          ### Installation
          ```bash
          dotnet add package AcmeshWrapper --version ${{ steps.version.outputs.VERSION }}
          ```
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        files: ./artifacts/*.nupkg
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload NuGet package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./artifacts/*.nupkg
        retention-days: 7